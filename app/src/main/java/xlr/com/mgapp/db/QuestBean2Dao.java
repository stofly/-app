package xlr.com.mgapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xlr.com.mgapp.bean.QuestBean2;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUEST_BEAN2".
*/
public class QuestBean2Dao extends AbstractDao<QuestBean2, Void> {

    public static final String TABLENAME = "QUEST_BEAN2";

    /**
     * Properties of entity QuestBean2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Optiona = new Property(3, String.class, "optiona", false, "OPTIONA");
        public final static Property Optionb = new Property(4, String.class, "optionb", false, "OPTIONB");
        public final static Property Optionc = new Property(5, String.class, "optionc", false, "OPTIONC");
        public final static Property Optiond = new Property(6, String.class, "optiond", false, "OPTIOND");
        public final static Property Tips = new Property(7, String.class, "tips", false, "TIPS");
        public final static Property Explain = new Property(8, String.class, "explain", false, "EXPLAIN");
        public final static Property Answer = new Property(9, String.class, "answer", false, "ANSWER");
        public final static Property Myanswer = new Property(10, String.class, "myanswer", false, "MYANSWER");
    }


    public QuestBean2Dao(DaoConfig config) {
        super(config);
    }
    
    public QuestBean2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUEST_BEAN2\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"TITLE\" TEXT," + // 2: title
                "\"OPTIONA\" TEXT," + // 3: optiona
                "\"OPTIONB\" TEXT," + // 4: optionb
                "\"OPTIONC\" TEXT," + // 5: optionc
                "\"OPTIOND\" TEXT," + // 6: optiond
                "\"TIPS\" TEXT," + // 7: tips
                "\"EXPLAIN\" TEXT," + // 8: explain
                "\"ANSWER\" TEXT," + // 9: answer
                "\"MYANSWER\" TEXT);"); // 10: myanswer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUEST_BEAN2\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestBean2 entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String optiona = entity.getOptiona();
        if (optiona != null) {
            stmt.bindString(4, optiona);
        }
 
        String optionb = entity.getOptionb();
        if (optionb != null) {
            stmt.bindString(5, optionb);
        }
 
        String optionc = entity.getOptionc();
        if (optionc != null) {
            stmt.bindString(6, optionc);
        }
 
        String optiond = entity.getOptiond();
        if (optiond != null) {
            stmt.bindString(7, optiond);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(8, tips);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(9, explain);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(10, answer);
        }
 
        String myanswer = entity.getMyanswer();
        if (myanswer != null) {
            stmt.bindString(11, myanswer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestBean2 entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String optiona = entity.getOptiona();
        if (optiona != null) {
            stmt.bindString(4, optiona);
        }
 
        String optionb = entity.getOptionb();
        if (optionb != null) {
            stmt.bindString(5, optionb);
        }
 
        String optionc = entity.getOptionc();
        if (optionc != null) {
            stmt.bindString(6, optionc);
        }
 
        String optiond = entity.getOptiond();
        if (optiond != null) {
            stmt.bindString(7, optiond);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(8, tips);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(9, explain);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(10, answer);
        }
 
        String myanswer = entity.getMyanswer();
        if (myanswer != null) {
            stmt.bindString(11, myanswer);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public QuestBean2 readEntity(Cursor cursor, int offset) {
        QuestBean2 entity = new QuestBean2( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // optiona
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // optionb
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // optionc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // optiond
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tips
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // explain
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // answer
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // myanswer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestBean2 entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOptiona(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOptionb(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOptionc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOptiond(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTips(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExplain(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAnswer(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMyanswer(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(QuestBean2 entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(QuestBean2 entity) {
        return null;
    }

    @Override
    public boolean hasKey(QuestBean2 entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
